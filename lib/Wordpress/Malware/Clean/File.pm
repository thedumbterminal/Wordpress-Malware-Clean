package Wordpress::Malware::Clean::File;
use strict;
use warnings;
use Exception::Class("FileException");
use File::Spec;
use File::Copy;
#######################################################################
sub new{
	my($class, $path, $parent) = @_;
	my $self = {
		'__path' => undef,
		'__parent' => undef,
		'__clean' => undef
	};
	bless $self, $class;
	$self->__setPath($path);
	if($parent){
		$self->__setParent($parent);
	}
	return $self;
}
#######################################################################
sub getPath{
	my $self = shift;
	return $self->{'__path'};
}
#######################################################################
sub getContents{
	my $self = shift;
	my $contents = "";
	if(open(FILE, "<", $self->getPath())){
		while(my $line = <FILE>){
			$contents .= $line;
		}
		close(FILE);
	}
	else{
		FileException->throw("Can't open file: $!");
	}
	return $contents;
}
#######################################################################
sub setCleanBaseDirectory{
	my($self, $temp) = @_;
	$self->{'__clean'} = $temp;
	return 1;
}
#######################################################################
sub doProcess{
	my($self, $sig) = @_;
	my $clean = $self->__getCleanPath();
	if($self->__isPhp()){	#need to check for malware
		my $contents = $self->getContents();
		$sig =~ s/([^a-zA-Z0-9])/\\$1/g;
		if($contents =~ m/$sig/m){
			print "Cleaning malware found in " . $self->getPath() . "...\n";
			$contents =~ s/$sig/<?php/g;
			if(open(CLEAN, ">", $clean)){
				print CLEAN $contents;
				close(CLEAN);
			}
			else{
				FileException->throw("Can't write clean file: $!");
			}
			return 1;
		}
	}
	if(!copy($self->getPath(), $clean)){	#copy all other files and non infected php
		FileException->throw("Can't copy file: $!");		
	}
	return 1;
}
#######################################################################
sub __isPhp{
	my $self = shift;
	if($self->getPath() =~ m/\.php$/){	#just check the file extension
		return 1;
	}
	return 0;
}
#######################################################################
sub __setPath{
	my($self, $path) = @_;
	$self->{'__path'} = $path;
	return 1;
}
#######################################################################
sub __setParent{
	my($self, $parent) = @_;
	$self->{'__parent'} = $parent;
	return 1;
}
#######################################################################
sub __getParent{
	my $self = shift;
	return $self->{'__parent'};
}
#######################################################################
sub __getCleanBaseDirectory{
	my $self = shift;
	my $clean = $self->{'__clean'};
	if(!$clean){
		my $parent = $self->__getParent();
		if($parent){
			$clean = $parent->__getCleanBaseDirectory();
		}
	}
	if(!$clean){
		FileException->throw("Can't find clean directory");
	}
	return $clean;
}
#######################################################################
sub __getCleanPath{
	my $self = shift;
	my $base = $self->__getCleanBaseDirectory();
	my $path = $self->getPath();
	$path =~ s/^\///;	#remove starting slash
	my $full = File::Spec->catfile($base->dirname, $path);
}
#####################################################################
return 1;